import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CodeChange {
  file: string;
  content: string;
}

interface AIResponse {
  response: string;
  codeChanges: CodeChange[];
}

// Full project templates for different types
const getCompleteProjectTemplate = (projectType: string, projectName: string) => {
  const templates = {
    react: {
      'package.json': JSON.stringify({
        name: projectName.toLowerCase().replace(/\s+/g, '-'),
        version: "1.0.0",
        description: "React app generated by AI",
        main: "index.js",
        scripts: {
          dev: "vite",
          build: "vite build",
          preview: "vite preview"
        },
        dependencies: {
          react: "^18.2.0",
          "react-dom": "^18.2.0"
        },
        devDependencies: {
          "@types/react": "^18.2.0",
          "@types/react-dom": "^18.2.0",
          "@vitejs/plugin-react": "^4.0.0",
          "typescript": "^5.0.0",
          "vite": "^4.4.0"
        }
      }, null, 2),
      'index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectName}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; }
        #root { min-height: 100vh; }
    </style>
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
</body>
</html>`,
      'src/main.tsx': `import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)`,
      'src/App.tsx': `import React from 'react'
import './App.css'

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to ${projectName}</h1>
        <p>Your React app is ready to go!</p>
      </header>
    </div>
  )
}

export default App`,
      'src/App.css': `.App {
  text-align: center;
}

.App-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.App-header h1 {
  font-size: 3rem;
  margin-bottom: 1rem;
  animation: fadeInUp 1s ease-out;
}

.App-header p {
  font-size: 1.2rem;
  opacity: 0.9;
  animation: fadeInUp 1s ease-out 0.2s both;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}`,
      'src/index.css': `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`
    },
    vanilla: {
      'index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectName}</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header class="hero">
            <h1 class="hero-title">${projectName}</h1>
            <p class="hero-subtitle">Welcome to your new web application</p>
            <button class="cta-button" onclick="showAlert()">Get Started</button>
        </header>
        
        <main class="main-content">
            <section class="features">
                <div class="feature-card">
                    <h3>Modern Design</h3>
                    <p>Beautiful, responsive interface</p>
                </div>
                <div class="feature-card">
                    <h3>Fast Performance</h3>
                    <p>Optimized for speed and efficiency</p>
                </div>
                <div class="feature-card">
                    <h3>User Friendly</h3>
                    <p>Intuitive and easy to use</p>
                </div>
            </section>
        </main>
    </div>
    <script src="script.js"></script>
</body>
</html>`,
      'styles.css': `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.hero {
    text-align: center;
    padding: 100px 0;
    color: white;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    animation: fadeInUp 1s ease-out;
}

.hero-subtitle {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    animation: fadeInUp 1s ease-out 0.2s both;
}

.cta-button {
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid white;
    color: white;
    padding: 15px 30px;
    font-size: 1.1rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    animation: fadeInUp 1s ease-out 0.4s both;
}

.cta-button:hover {
    background: white;
    color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.2);
}

.main-content {
    background: white;
    border-radius: 20px 20px 0 0;
    margin-top: 50px;
    padding: 60px 0;
}

.features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 30px;
    margin-top: 40px;
}

.feature-card {
    background: #f8f9fa;
    padding: 40px 30px;
    border-radius: 15px;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
}

.feature-card h3 {
    color: #667eea;
    margin-bottom: 15px;
    font-size: 1.5rem;
}

.feature-card p {
    color: #666;
    line-height: 1.6;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (max-width: 768px) {
    .hero-title {
        font-size: 2.5rem;
    }
    
    .hero-subtitle {
        font-size: 1.1rem;
    }
    
    .features {
        grid-template-columns: 1fr;
        gap: 20px;
    }
}`,
      'script.js': `// Welcome to your JavaScript file!
console.log('${projectName} is loaded and ready!');

function showAlert() {
    alert('Welcome to ${projectName}! Your application is ready to be customized.');
}

// Add smooth scrolling
document.addEventListener('DOMContentLoaded', function() {
    // Animate feature cards on scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observe all feature cards
    document.querySelectorAll('.feature-card').forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(card);
    });
    
    // Add interactive button effects
    const button = document.querySelector('.cta-button');
    if (button) {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px) scale(1.05)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    }
});

// Add some interactive functionality
window.addEventListener('scroll', function() {
    const scrolled = window.pageYOffset;
    const rate = scrolled * -0.5;
    const hero = document.querySelector('.hero');
    if (hero) {
        hero.style.transform = 'translateY(' + rate + 'px)';
    }
});`
    }
  };
  
  return templates[projectType as keyof typeof templates] || templates.vanilla;
};

const handleRequest = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, projectContent, projectId, conversationHistory } = await req.json();
    
    // Get API key from environment
    const openaiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openaiKey) {
      return new Response(JSON.stringify({ 
        error: 'OpenAI API key not configured. Please add it in Settings.',
        response: 'API key missing. Please configure your OpenAI API key in the settings.',
        codeChanges: []
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Detect if this is a new project request
    const isNewProject = message.toLowerCase().includes('create') && 
                         (message.toLowerCase().includes('project') || 
                          message.toLowerCase().includes('website') || 
                          message.toLowerCase().includes('app'));

    let codeChanges: CodeChange[] = [];
    let responseMessage = '';

    if (isNewProject || Object.keys(projectContent).length === 0) {
      // Generate complete project structure
      const projectType = message.toLowerCase().includes('react') ? 'react' : 'vanilla';
      const projectName = extractProjectName(message) || 'My Project';
      
      const template = getCompleteProjectTemplate(projectType, projectName);
      codeChanges = Object.entries(template).map(([file, content]) => ({
        file,
        content
      }));
      
      responseMessage = `I've created a complete ${projectType === 'react' ? 'React' : 'vanilla HTML/CSS/JS'} project structure for "${projectName}". The project includes:\n\n`;
      responseMessage += Object.keys(template).map(file => `• ${file}`).join('\n');
      responseMessage += '\n\nYour project is ready to preview! You can now see it in the preview panel and make any modifications you need.';
    } else {
      // Use AI for modifications
      const context = `You are a professional web developer assistant. Help users create and modify web applications.

Current project files:
${JSON.stringify(projectContent, null, 2)}

User request: ${message}

Instructions:
- Always provide complete, executable file content
- Include proper HTML structure, CSS styling, and JavaScript functionality
- Make code production-ready and well-commented
- Ensure responsive design and modern best practices
- For animations, use CSS keyframes and modern animation properties
- Return ONLY valid JSON in this exact format:

{
  "response": "Your explanation of changes made",
  "codeChanges": [
    {
      "file": "filename.ext",
      "content": "complete file content here"
    }
  ]
}`;

      const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: context },
            ...conversationHistory.slice(-5).map((msg: any) => ({
              role: msg.type === 'user' ? 'user' : 'assistant',
              content: msg.content
            })),
            { role: 'user', content: message }
          ],
          temperature: 0.7,
          max_tokens: 3000,
        }),
      });

      if (!apiResponse.ok) {
        throw new Error(`OpenAI API error: ${apiResponse.statusText}`);
      }

      const data = await apiResponse.json();
      const aiResponse = data.choices[0].message.content;

      try {
        const parsed = JSON.parse(aiResponse);
        responseMessage = parsed.response;
        codeChanges = parsed.codeChanges || [];
      } catch {
        responseMessage = aiResponse;
        codeChanges = [];
      }
    }

    return new Response(JSON.stringify({
      response: responseMessage,
      codeChanges
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in AI assistant:', error);
    return new Response(JSON.stringify({ 
      error: 'Failed to process request. Please try again.',
      response: 'Sorry, I encountered an error. Please try rephrasing your request or check your API key configuration.',
      codeChanges: []
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
};

// Helper function to extract project name from message
function extractProjectName(message: string): string | null {
  const patterns = [
    /create (?:a |an )?(?:project|website|app) (?:called |named |for )?["']([^"']+)["']/i,
    /create (?:a |an )?(?:project|website|app) (?:called |named |for )?([^\s,\.!?]+)/i,
    /(?:project|website|app) (?:called |named )?["']([^"']+)["']/i,
    /(?:project|website|app) (?:called |named )?([^\s,\.!?]+)/i
  ];
  
  for (const pattern of patterns) {
    const match = message.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }
  return null;
}

// Serve the function
serve(handleRequest);
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import { ArrowLeft, Save, Eye, Download, Code2, Palette, Settings, MessageCircle, FileCode, Home } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import CodeEditor from "@/components/builder/CodeEditor";
import PreviewFrame from "@/components/builder/PreviewFrame";
import AIChat from "@/components/builder/AIChat";
import PublishButton from "@/components/integrations/PublishButton";
import FileExplorer from "@/components/builder/FileExplorer";

interface ProjectData {
  id: string;
  name: string;
  content: {
    [key: string]: string;
  };
}

const Builder = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [project, setProject] = useState<ProjectData | null>(null);
  const [activeTab, setActiveTab] = useState("html");
  const [saving, setSaving] = useState(false);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [showChat, setShowChat] = useState(true);
  const [availableFiles, setAvailableFiles] = useState<string[]>([]);
  const [showCodeArea, setShowCodeArea] = useState(false);
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState<{
    current: number;
    total: number;
    currentFile: string;
  } | null>(null);

  useEffect(() => {
    if (projectId) {
      fetchProject();
    }
  }, [projectId]);

  // Auto-refresh preview when project content changes
  useEffect(() => {
    if (project?.content) {
      // Small delay to ensure content is fully updated
      const timer = setTimeout(() => {
        // Trigger preview refresh by updating a key
        setActiveTab(prev => prev);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [project?.content]);

  const fetchProject = async () => {
    try {
      const { data, error } = await supabase
        .from("projects")
        .select("*")
        .eq("id", projectId)
        .single();

      if (error) throw error;
      if (!data) throw new Error('Project not found');

      const content = typeof data.content === 'string' ? JSON.parse(data.content) : data.content;
      setProject({
        id: data.id,
        name: data.name,
        content
      });
      
      // Set available files from project content
      const files = Object.keys(content || {});
      setAvailableFiles(files);
      if (files.length > 0 && !files.includes(activeTab)) {
        setActiveTab(files[0]);
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to load project",
        variant: "destructive",
      });
      navigate("/dashboard");
    }
  };

  const saveProject = async () => {
    if (!project) return;

    setSaving(true);
    try {
      const { error } = await supabase
        .from("projects")
        .update({
          content: JSON.stringify(project.content),
          updated_at: new Date().toISOString()
        })
        .eq("id", project.id);

      if (error) throw error;

      toast({
        title: "Saved",
        description: "Project saved successfully!",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save project",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  const updateCode = (fileName: string, value: string) => {
    if (!project) return;
    setProject({
      ...project,
      content: {
        ...project.content,
        [fileName]: value
      }
    });
  };

  const handleAICodeUpdate = (fileName: string, content: string) => {
    updateCode(fileName, content);
    // Add file if it doesn't exist
    if (!availableFiles.includes(fileName)) {
      setAvailableFiles(prev => [...prev, fileName]);
    }
  };

  const exportProject = async () => {
    if (!project) return;

    try {
      // Create a structured zip file with all project files
      const { default: JSZip } = await import('jszip');
      const zip = new JSZip();

    
    // Add project structure and files
    Object.entries(project.content).forEach(([fileName, content]) => {
      zip.file(fileName, content);
    });

    // Add package.json if it's a framework project
    const isFramework = !['html', 'css', 'js'].some(ext => project.content[`index.${ext}`] || project.content[`main.${ext}`]);
    if (isFramework) {
      const packageJson = {
        name: project.name.toLowerCase().replace(/\s+/g, '-'),
        version: "1.0.0",
        description: "Generated by WebCrafter AI",
        main: "index.js",
        scripts: {
          dev: "npm run dev",
          build: "npm run build",
          start: "npm start"
        },
        dependencies: {},
        devDependencies: {}
      };
      zip.file("package.json", JSON.stringify(packageJson, null, 2));
    }

    // Add README.md
    const readme = `# ${project.name}

Generated by WebCrafter AI

## Getting Started

1. Extract the ZIP file
2. Open in your favorite IDE
3. Install dependencies: \`npm install\`
4. Start development: \`npm run dev\`

## Features

- AI-generated code structure
- Mobile-responsive design
- Production-ready
- Modern best practices

Generated on: ${new Date().toLocaleDateString()}
`;
    zip.file("README.md", readme);

      // Generate and download zip file
      const content = await zip.generateAsync({ type: "blob" });
      const url = URL.createObjectURL(content);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${project.name.toLowerCase().replace(/\s+/g, '-')}.zip`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export project as ZIP file.",
        variant: "destructive",
      });
    }
  };

  if (!project) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading project...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen relative">
      {/* Spline Background for Builder */}
      <div className="fixed inset-0 z-0">
        <iframe 
          src='https://my.spline.design/orbittriangle-3S6GOic3EjNFF8CrhyvHizYQ/' 
          frameBorder='0' 
          width='100%' 
          height='100%'
          className="pointer-events-none opacity-20"
        />
      </div>
      
      <div className="relative z-10 h-screen bg-background/95 backdrop-blur-sm flex flex-col">
      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur-sm px-4 py-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => navigate("/dashboard")}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
            <h1 className="font-semibold text-lg">{project.name}</h1>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate("/")}
              className="text-muted-foreground hover:text-primary"
            >
              <Home className="w-4 h-4 mr-2" />
              Home
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowChat(!showChat)}
            >
              <MessageCircle className="w-4 h-4 mr-2" />
              {showChat ? "Hide" : "Show"} Chat
            </Button>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowCodeArea(!showCodeArea)}
            >
              <Code2 className="w-4 h-4 mr-2" />
              {showCodeArea ? "Hide" : "Show"} Code
            </Button>
            <PublishButton
              projectContent={project.content}
              projectName={project.name}
            />
            <Button 
              variant="outline" 
              size="sm"
              onClick={exportProject}
            >
              <Download className="w-4 h-4 mr-2" />
              Export ZIP
            </Button>
            <Button 
              size="sm"
              onClick={saveProject}
              disabled={saving}
            >
              <Save className="w-4 h-4 mr-2" />
              {saving ? "Saving..." : "Save"}
            </Button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        <ResizablePanelGroup direction="horizontal">
          {/* AI Chat Panel */}
          {showChat && (
            <>
              <ResizablePanel defaultSize={25} minSize={20} maxSize={40}>
                <AIChat 
                  projectId={project.id}
                  onCodeUpdate={handleAICodeUpdate}
                  projectContent={project.content}
                />
              </ResizablePanel>
              <ResizableHandle />
            </>
          )}
          
          {showCodeArea ? (
            <>
              {/* File Explorer Panel */}
              <ResizablePanel defaultSize={showChat ? 20 : 25} minSize={15}>
                <FileExplorer
                  files={project.content}
                  activeFile={selectedFile || ''}
                  onFileSelect={setSelectedFile}
                />
              </ResizablePanel>
              
              <ResizableHandle />
              
              {/* Code Editor Panel */}
              <ResizablePanel defaultSize={showChat ? 30 : 35} minSize={25}>
                <div className="h-full">
                  {selectedFile ? (
                    <div className="h-full flex flex-col">
                      <div className="px-4 py-2 border-b border-border bg-card">
                        <span className="text-sm font-medium">{selectedFile}</span>
                      </div>
                      <div className="flex-1">
                        <CodeEditor
                          language={getLanguageFromFileName(selectedFile)}
                          value={project.content[selectedFile] || ''}
                          onChange={(value) => updateCode(selectedFile, value)}
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="h-full flex items-center justify-center text-muted-foreground">
                      <div className="text-center">
                        <FileCode className="w-12 h-12 mx-auto mb-4 opacity-50" />
                        <p>Select a file to view its contents</p>
                      </div>
                    </div>
                  )}
                </div>
              </ResizablePanel>
              
              <ResizableHandle />
              
              {/* Preview Panel */}
              <ResizablePanel defaultSize={showChat ? 25 : 40} minSize={25}>
              <PreviewFrame 
                html={project.content.html || project.content['index.html'] || ''}
                css={project.content.css || project.content['styles.css'] || ''}
                js={project.content.js || project.content['script.js'] || ''}
                isGenerating={isGenerating}
                generationProgress={generationProgress}
                projectFiles={availableFiles}
              />
              </ResizablePanel>
            </>
          ) : (
            <ResizablePanel defaultSize={showChat ? 75 : 100}>
              <PreviewFrame 
                html={project.content.html || project.content['index.html'] || ''}
                css={project.content.css || project.content['styles.css'] || ''}
                js={project.content.js || project.content['script.js'] || ''}
                isGenerating={isGenerating}
                generationProgress={generationProgress}
                projectFiles={availableFiles}
              />
            </ResizablePanel>
          )}
        </ResizablePanelGroup>
      </div>
      </div>
    </div>
  );
};

const getLanguageFromFileName = (fileName: string): string => {
  const extension = fileName.split('.').pop()?.toLowerCase();
  switch (extension) {
    case 'html': return 'html';
    case 'css': return 'css';
    case 'js': case 'jsx': return 'javascript';
    case 'ts': case 'tsx': return 'typescript';
    case 'vue': return 'html';
    case 'py': return 'python';
    case 'php': return 'php';
    case 'rb': return 'ruby';
    case 'java': return 'java';
    case 'cpp': case 'c': return 'cpp';
    case 'json': return 'json';
    case 'md': return 'markdown';
    default: return 'text';
  }
};

export default Builder;